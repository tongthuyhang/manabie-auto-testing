name: ðŸ§ª Playwright + QASE (PX) - Multi-Module Parallel CI

on:
  workflow_dispatch:
    inputs:
      qase_project:
        description: 'Qase Project Code (PX / SX)'
        required: true
        default: 'PX'
      environments:
        description: 'Select environment(s) to test (comma separated)'
        required: true
        default: 'dev-staging'
      projects:
        description: 'Select Playwright projects to run (comma separated)'
        required: true
        default: 'scheduling,order,invoice,grade,user'
      tag:
        description: 'Select test tag to filter'
        required: true
        type: choice
        options:
          - "@Smoke"
          - "@Regression"
          - "@All"
        default: "@Smoke"
      qase_run_id:
        description: 'Existing Qase Run ID (optional). If set, results will be attached to this run.'
        required: false
      parallel_mode:
        description: 'How to parallelize execution'
        required: true
        type: choice
        options:
          - by-project
          - by-environment
        default: by-project

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.make-matrix.outputs.matrix }}
    steps:
      - name: Prepare matrix JSON
        id: make-matrix
        shell: bash
        run: |
          echo "Building matrix from inputs..."
          IFS=',' read -ra UI_PROJS <<< "${{ github.event.inputs.projects }}"
          IFS=',' read -ra ENVS <<< "${{ github.event.inputs.environments }}"

          MATRIX='{"include": []}'
          for ENV in "${ENVS[@]}"; do
            ENV="$(echo "$ENV" | xargs)"
            for P in "${UI_PROJS[@]}"; do
              P="$(echo "$P" | xargs)"
              # Use P as Playwright project name directly (must match playwright.config.ts)
              MATRIX=$(echo "$MATRIX" | jq ".include += [{\"environment\":\"$ENV\",\"project\":\"$P\"}]")
            done
          done

          echo "Final matrix (pretty):"
          echo "$MATRIX" | jq .
          # Compact to one line for GitHub output
          MATRIX_ESCAPED=$(echo "$MATRIX" | jq -c .)
          echo "matrix=$MATRIX_ESCAPED" >> $GITHUB_OUTPUT

  test:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
      fail-fast: false
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install Salesforce CLI (sf) - optional, safe
        run: |
          npm install -g @salesforce/cli@latest
          sf --version || true

      - name: Setup env + Qase Run info
        shell: bash
        run: |
          echo "ENVIRONMENT=${{ matrix.environment }}" >> $GITHUB_ENV
          echo "PROJECT=${{ matrix.project }}" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "QASE_PROJECT=${{ github.event.inputs.qase_project }}" >> $GITHUB_ENV

          if [ -n "${{ github.event.inputs.qase_run_id }}" ]; then
            echo "QASE_TESTOPS_RUN_ID=${{ github.event.inputs.qase_run_id }}" >> $GITHUB_ENV
            echo "Using existing Qase Run ID: ${{ github.event.inputs.qase_run_id }}"
          else
            # Create a descriptive Qase run title; Playwright Qase reporter will use this to create a new run
            RUN_TITLE="${{ github.event.inputs.qase_project }}-${{ matrix.project }}-${{ matrix.environment }}-$(date '+%Y-%m-%d_%H-%M-%S')"
            echo "QASE_TESTOPS_RUN_TITLE=$RUN_TITLE" >> $GITHUB_ENV
            echo "Will create Qase Run with title: $RUN_TITLE"
          fi

      - name: Setup Salesforce Auth (optional, shell-based)
        shell: bash
        env:
          SFDX_AUTH_URL_DEV: ${{ secrets.SFDX_AUTH_URL_DEV }}
          SFDX_AUTH_URL_PREPROD: ${{ secrets.SFDX_AUTH_URL_PREPROD }}
        run: |
          echo "Checking for SFDX auth secrets..."
          if [ "${{ matrix.environment }}" = "dev-staging" ]; then
            if [ -n "$SFDX_AUTH_URL_DEV" ]; then
              echo "$SFDX_AUTH_URL_DEV" > auth_url.txt
              sf org login sfdx-url --sfdx-url-file auth_url.txt --alias myOrgAlias || true
              echo "SFDX_ALIAS=myOrgAlias" >> $GITHUB_ENV
              rm -f auth_url.txt
            else
              echo "No SFDX_AUTH_URL_DEV secret found; skipping SFDX login for dev-staging"
            fi
          elif [ "${{ matrix.environment }}" = "pre-prod" ]; then
            if [ -n "$SFDX_AUTH_URL_PREPROD" ]; then
              echo "$SFDX_AUTH_URL_PREPROD" > auth_url.txt
              sf org login sfdx-url --sfdx-url-file auth_url.txt --alias myPreProd || true
              echo "SFDX_ALIAS=myPreProd" >> $GITHUB_ENV
              rm -f auth_url.txt
            else
              echo "No SFDX_AUTH_URL_PREPROD secret found; skipping SFDX login for pre-prod"
            fi
          else
            echo "No SFDX auth required for ${matrix.environment}"
          fi

      - name: Run Playwright tests (per matrix entry)
        env:
          ENV: ${{ env.ENVIRONMENT }}
          PROJECT: ${{ env.PROJECT }}
          TAG: ${{ env.TAG }}
          QASE_MODE: testops
          QASE_TESTOPS_API_TOKEN: ${{ secrets.QASE_TESTOPS_API_TOKEN }}
          QASE_TESTOPS_API_HOST: qase.io
          # If QASE_TESTOPS_RUN_ID exists it will be used by reporter; otherwise reporter will create using RUN_TITLE
          QASE_TESTOPS_RUN_ID: ${{ env.QASE_TESTOPS_RUN_ID }}
          QASE_TESTOPS_RUN_TITLE: ${{ env.QASE_TESTOPS_RUN_TITLE }}
          QASE_TESTOPS_PROJECT: ${{ env.QASE_PROJECT }}
          QASE_CAPTURE_LOGS: false
        run: |
          echo "Running for project=${PROJECT} env=${ENV} tag=${TAG}"
          if [ "$TAG" = "@All" ]; then
            npx playwright test --project="$PROJECT" || true
          else
            npx playwright test --project="$PROJECT" --grep "$TAG" || true
          fi

      - name: Debug - list workspace (always)
        if: always()
        run: |
          echo "Workspace top:"
          ls -la
          echo "Recursive listing:"
          ls -R || true

      - name: Package artifacts (zip) - only on Ubuntu runners
        if: always()
        run: |
          TS=$(date '+%Y-%m-%d_%H-%M-%S')
          ART_DIR="artifacts/${PROJECT}-${ENV}-${TS}"
          mkdir -p "$ART_DIR"
          # copy possible report directories if they exist
          if [ -d "playwright-report" ]; then cp -r playwright-report "$ART_DIR/"; fi
          if [ -d ".playwright-report" ]; then cp -r .playwright-report "$ART_DIR/"; fi
          if [ -d "test-results" ]; then cp -r test-results "$ART_DIR/"; fi
          if [ -f "test-results.json" ]; then cp test-results.json "$ART_DIR/"; fi
          if [ -f "test-logs.json" ]; then cp test-logs.json "$ART_DIR/"; fi
          cd artifacts
          zip -r "${PROJECT}-${ENV}-${TS}.zip" "${PROJECT}-${ENV}-${TS}" || true
          echo "artifact_zip=${PROJECT}-${ENV}-${TS}.zip" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload artifact to GitHub (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.project }}-${{ matrix.environment }}
          path: |
            artifacts/${{ steps.package_artifact.outputs.artifact_zip }}
            playwright-report/
            .playwright-report/
          if-no-files-found: warn
          retention-days: 14

      - name: (Optional) Attach report to Qase run via API - SKIPPED by default
        if: false
        run: |
          echo "This step is optional. Use Qase API here to attach zipped artifact to run id if you want."
