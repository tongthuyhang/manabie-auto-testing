name: üß™ Playwright + QASE Multi-Env Parallel CI/CD

on:
  workflow_dispatch:
    inputs:
      environments:
        description: 'Select environment(s) to test (comma separated)'
        required: true
        default: 'dev-staging'
      projects:
        description: 'Select project(s) to run (comma separated, e.g. scheduling,order)'
        required: true
        default: 'scheduling'
      tag:
        description: 'Select test tag to filter'
        required: true
        type: choice
        options:
          - "@Smoke"
          - "@Regression"
          - "@All"
        default: "@Smoke"
      parallel_mode:
        description: 'How to parallelize execution'
        required: true
        type: choice
        options:
          - by-project
          - by-environment
        default: by-project

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: Build matrix from inputs
        id: build-matrix
        run: |
          echo "Building job matrix..."
          IFS=',' read -ra PROJS <<< "${{ github.event.inputs.projects }}"
          IFS=',' read -ra ENVS <<< "${{ github.event.inputs.environments }}"
          MATRIX='{"include":[]}'
          for ENV in "${ENVS[@]}"; do
            ENV="$(echo $ENV | xargs)"
            for PROJ in "${PROJS[@]}"; do
              PROJ="$(echo $PROJ | xargs)"
              MATRIX=$(echo "$MATRIX" | jq ".include += [{\"environment\":\"$ENV\",\"project\":\"$PROJ\"}]")
            done
          done
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          
          echo "Final matrix:"
          echo "$MATRIX" | jq .

          # Escape special characters before exporting
          MATRIX_ESCAPED=$(echo "$MATRIX" | jq -c .)
          echo "matrix=$MATRIX_ESCAPED" >> $GITHUB_OUTPUT

  test:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      fail-fast: false
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install Salesforce CLI (sf)
        run: |
          npm install -g @salesforce/cli@latest
          echo "Salesforce CLI version:"
          sf --version || true
          sf plugins --core || true

      - name: Setup environment variables and run title
        run: |
          echo "ENVIRONMENT=${{ matrix.environment }}" >> $GITHUB_ENV
          echo "PROJECT=${{ matrix.project }}" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "RUN_TITLE=${{ matrix.project }}-${{ matrix.environment }}-$(date '+%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Setup Salesforce Auth (optional, shell-based)
        shell: bash
        env:
          SFDX_AUTH_URL_DEV: ${{ secrets.SFDX_AUTH_URL_DEV }}
          SFDX_AUTH_URL_PREPROD: ${{ secrets.SFDX_AUTH_URL_PREPROD }}
        run: |
          echo "Setting up SFDX auth for environment: $ENVIRONMENT"

          if [ "$ENVIRONMENT" = "dev-staging" ]; then
            if [ -n "$SFDX_AUTH_URL_DEV" ]; then
              echo "$SFDX_AUTH_URL_DEV" > auth_url.txt
              sf org login sfdx-url --sfdx-url-file auth_url.txt --alias myOrgAlias || true
              echo "SFDX_ALIAS=myOrgAlias" >> $GITHUB_ENV
              rm -f auth_url.txt
            else
              echo "‚ö†Ô∏è Missing SFDX_AUTH_URL_DEV secret, skipping auth for dev-staging"
            fi
          elif [ "$ENVIRONMENT" = "pre-prod" ]; then
            if [ -n "$SFDX_AUTH_URL_PREPROD" ]; then
              echo "$SFDX_AUTH_URL_PREPROD" > auth_url.txt
              sf org login sfdx-url --sfdx-url-file auth_url.txt --alias myPreProd || true
              echo "SFDX_ALIAS=myPreProd" >> $GITHUB_ENV
              rm -f auth_url.txt
            else
              echo "‚ö†Ô∏è Missing SFDX_AUTH_URL_PREPROD secret, skipping auth for pre-prod"
            fi
          else
            echo "‚ÑπÔ∏è No Salesforce auth setup for environment: $ENVIRONMENT"
          fi

      - name: Run Playwright Tests
        env:
          ENV: ${{ env.ENVIRONMENT }}
          PROJECT: ${{ env.PROJECT }}
          TAG: ${{ env.TAG }}
          QASE_MODE: testops
          QASE_TESTOPS_API_TOKEN: ${{ secrets.QASE_TESTOPS_API_TOKEN }}
          QASE_TESTOPS_API_HOST: qase.io
          QASE_TESTOPS_RUN_TITLE: ${{ env.RUN_TITLE }}
          QASE_TESTOPS_PROJECT: ${{ matrix.project }}
          QASE_CAPTURE_LOGS: false
        run: |
          echo "Running tests for PROJECT=${PROJECT} ENV=${ENV} TAG=${TAG}"
          if [ "$TAG" = "@All" ]; then
            npx playwright test --project="$PROJECT" || true
          else
            npx playwright test --project="$PROJECT" --grep "$TAG" || true
          fi

      - name: Debug - list workspace (always)
        if: always()
        run: |
          echo "Listing repo files..."
          ls -la
          echo "Listing root recursively..."
          ls -R

      - name: Upload Playwright Report (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.project }}-${{ matrix.environment }}
          path: |
            playwright-report/
            .playwright-report/
            test-results/
          if-no-files-found: warn
          retention-days: 30

      - name: Upload JSON results (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.project }}-${{ matrix.environment }}
          path: |
            test-results.json
            test-logs.json
          if-no-files-found: warn
          retention-days: 30
